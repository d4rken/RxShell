buildscript {
    def versionMajor = 3
    def versionMinor = 1
    def versionPatch = 0

    ext.versions = [
            'versionCode': versionMajor * 10000 + versionMinor * 100 + versionPatch,
            'versionName': "${versionMajor}.${versionMinor}.${versionPatch}",
            'minSdk'     : 21,
            'targetSdk'  : 31,
            'compileSdk' : 31,
            'sourceCompatibility': JavaVersion.VERSION_1_8,
            'targetCompatibility': JavaVersion.VERSION_1_8,
            'supportLibrary'     : '28.0.0',
    ]

    ext.bintrayConfig = [
            bintrayRepo     : 'maven',
            bintrayName     : 'rxshell',
            publishedGroupId: 'eu.darken.rxshell',

            siteUrl         : 'https://github.com/d4rken/RxShell',
            issuesUrl       : 'https://github.com/d4rken/RxShell/issues',
            gitUrl          : 'https://github.com/d4rken/RxShell.git',

            libraryVersion  : versions.versionName,

            developerId     : 'darken',
            developerName   : 'Matthias Urhahn',
            developerEmail  : 'darken@darken.eu',

            licenseName     : 'Apache-2.0',
            licenseUrl      : 'https://github.com/d4rken/RxShell/blob/master/LICENSE',
            allLicenses     : ["Apache-2.0"]
    ]

    ext.deps = [
            'support'    : [
                    'annotations': "com.android.support:support-annotations:${versions.supportLibrary}",
                    'appcompat'  : "com.android.support:appcompat-v7:${versions.supportLibrary}"
            ],
            androidPlugin: 'com.android.tools.build:gradle:7.0.4',
            timber       : "com.jakewharton.timber:timber:4.7.1",
            rxJava       : "io.reactivex.rxjava3:rxjava:3.1.3",
            rxJavaReplay : "com.jakewharton.rx3:replaying-share:3.0.0",
            jUnit        : "junit:junit:4.12",
            mockito      : "org.mockito:mockito-core:3.9.0",
            awaitility   : "org.awaitility:awaitility:3.0.0",
    ]

    repositories {
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
}

apply plugin: 'java'

allprojects {
    apply plugin: 'jacoco'
    repositories {
        google()
        jcenter()
    }
}

subprojects { subProject ->
    def exclude = ['eu/darken/R*.class', '**/BuildConfig.class', '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*']
    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
        reports {
            xml.enabled = true
            html.enabled = true
        }

        sourceDirectories.from files(["${project.projectDir}/src/main/java"])
        classDirectories.from files([fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: exclude)])
        executionData.from fileTree(dir: "$project.buildDir", includes: [
                "jacoco/testDebugUnitTest.exec"
        ])

        rootProject.coveralls.sourceDirs.addAll(sourceDirectories.flatten())
    }

    afterEvaluate {
        def isLibrary = subProject.plugins.hasPlugin('android-library')

        if (isLibrary) {
            task javadoc(type: Javadoc) {
                source = android.sourceSets.main.java.srcDirs
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            }
        }
    }
}

def publishedProjects = subprojects.findAll { !it.path.contains('example') }
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.jacocoTestReport)

    additionalSourceDirs.from files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from files(publishedProjects.jacocoTestReport.sourceDirectories)
    classDirectories.from files(publishedProjects.jacocoTestReport.classDirectories)
    executionData.from files(publishedProjects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'
    dependsOn jacocoRootReport
}
